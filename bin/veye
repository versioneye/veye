#!/usr/bin/env ruby

require 'gli'
require 'rest_client'
require 'json'
require 'rainbow'

require 'veye'

include GLI::App

program_desc 'VersionEye commandline tool'
program_long_desc Veye::BIGEYE.foreground(:green)

wrap_help_text :verbatim
version Veye::VERSION

COMMANDS_WITHOUT_API_KEY = [:help, :ping, :search]

config_file '.veye.rc'

desc 'set api key'
flag :api_key, :default_value => "<add your api key here>"

desc 'set server url'
flag :server, :default_value => "www.versioneye.com"

desc 'set service port'
flag :port, :default_value => "80"

desc 'set service path'
flag :path, :default_value => "api/v2"

desc 'set connection protocol'
flag :protocol, :default_value => "http"

desc 'set folder of veye_cert.pem'
flag :ssl_path, :default_value => "~/.veye"

desc "don't use colors"
switch 'color', :default_value => true, :negetable => true

pre do |global_options, command, args|
  check_config_file
  $global_options = init_environment
  $global_options.merge!(global_options)
  needs_api_key = ! COMMANDS_WITHOUT_API_KEY.member?(command.name) 
  check_configs($global_options, needs_api_key)
  $global_options[:url] = Veye::API::Resource.build_url($global_options)
end

desc 'check service status'
command :ping do |c|
 c.action do |global_options, options, args|
   respond = Veye::Service.ping()
   if respond.success
     puts "#{respond.data['message']}".foreground(:green)
   else
     printf(
       "VersionEye didnt recognized secret word.Answered %s, %s\n",
       respond.code.to_s.foreground(:red),
       "#{respond.message}".foreground(:yellow)
     )
   end
 end
end

desc 'change the api key'
arg_name 'api_key'
command :change_key do |c|
  c.action do |global_options, options, args|
    help_now!("the api key is mandatory") if args.empty?
    api_key = args.shift
    $global_options[:api_key] = api_key
    save_configs
  end
end

desc 'Search packages on VersionEye.'
arg_name 'search_term'
command :search do |c|
  c.desc 'filter results by language'
  c.flag [:l, :language, 'language-name']

  c.desc 'filter result by Manven specific GroupId'
  c.flag "group-id"

  c.desc "get next N results, by default it only return 30 results."
  c.flag [:page, 'page-number']

  c.desc "change output format"
  c.flag [:format,'format-name'], :default_value => "pretty"

  c.desc "show paging information"
  c.switch [:pagination, 'show-pagination'], :default_value => true,
                                             :negatable => true

  c.action do |global_options, options, args|
    help_now!("the search term is mandatory.".foreground(:red)) if args.empty?
    search_term = args.shift
    response = Veye::Package::Search.search(search_term, 
                                         options[:language], 
                                         options["group-id"], 
                                         options[:page])

    if response.success == false or response.data["results"].empty?
        error_msg = sprintf(
          "No results for `%s` %s",
          "#{search_term}".foreground(:yellow),
          (options[:language].nil?)? "" : " for language: #{options[:language]}"
        )
        exit_now!(error_msg)
    end

    Veye::Package::Search.format(response.data["results"], options[:format])
    if options[:pagination]
      printf("\n#-- pagination data ------------------\n")
      Veye::Pagination::Show.format response.data['paging'], options[:format]
    end
  
  end
end

desc 'returns package information'
arg_name 'product_key'
command :info do |c|
  c.desc "change output format"
  c.flag [:format, 'format-name'], :default_value => 'pretty'

  c.action do |global_options, options, args|
    help_now!("package_key is missing".foreground(:red)) if args.empty?
    package_key = args.shift
    response = Veye::Package::Info.search(package_key)
    
    unless response.success
        error_msg = sprintf(
          "Didnt find any package with product_key: `%s`",
          "#{package_key}".foreground(:yellow)
        )
        exit_now!(error_msg)
    end

    Veye::Package::Info.format(response.data, options[:format])
  end
end

desc 'analyzes given project file and returns version info'
arg_name 'product_file'

command :check do |c|
  c.desc "change output format"
  c.flag [:format, 'format-name'], :default_value => 'pretty'
  
  c.action do |global_options, options, args|
    help_now!("File of project is unspecified.".foreground(:red)) if args.empty?
    file_name = args.shift
    response = Veye::Project::Check.upload(file_name, global_options[:api_key])
    if response.success == false
      exit_now!("File upload failed.\n #{response.message}\n".foreground(:red))
    end
 
    if response.success
      Veye::Project::Check.format_dependencies(
        response.data['dependencies'], 
        options[:format]
      )
    else
      exit_now!("Didnt get dependency info from API: #{response.message}")
    end
  end
end


desc 'manage your projects'
arg_name 'subcommand'
command :projects do |c|
  c.desc "change output format"
  c.flag [:format, 'format-name'], :default_value => 'pretty'
   
  c.desc "show all projects"
  c.command :list do |list|
    list.action do |global_options, options, args|
      api_key = global_options[:api_key]
      response = Veye::Project::Check.get_list(api_key)
      
      if response.success == false
        error_msg = "Didnt get list of projects: \n #{response.message.foreground(:red)}"
        exit_now!(error_msg)
      end

      Veye::Project::Check.format(response.data, options[:format])
    end
  end

  c.desc "upload new project file"
  c.arg_name "filepath"
  c.command :upload do |upload|
    upload.action do |global_options, options, args|
      help_now!("The filepath is missing.".foreground(:red)) if args.empty?
      filename = args.shift
      api_key = global_options[:api_key]
      response = Veye::Project::Check.upload(filename, api_key)
      unless response.success
        error_msg = "Uploading failed - #{response.message.foreground(:red)}"
        exit_now! error_msg
      end
      
      Veye::Project::Check.format(response.data, options[:format])
      Veye::Project::Check.format_dependencies(response.data['dependencies'], options[:format])
   end
  end
 
  c.desc "update existing project file"
  c.arg_name "project_key_and_filepath", multiple: true
  c.command :update do |update|
    update.action do |global_options, options, args|
      help_now!("The project key and the filepath are missing".foreground(:red)) if args.empty?
      help_now!("One argument is missing: a project key or filepath".foreground(:red)) if args.count == 1
      
      project_key, filename = args
      api_key = global_options[:api_key]

      response = Veye::Project::Check.update(project_key, filename, api_key)
      unless response.success
        error_msg = "Uploading failed - #{response.message.foreground(:red)}"
        exit_now! error_msg
      end
      
      Veye::Project::Check.format(response.data, options[:format])
      Veye::Project::Check.format_dependencies(response.data['dependencies'], options[:format])
    end
  end

  c.desc "show project info"
  c.arg_name "project_key"
  c.command :show do |show|
    show.action do |global_options, options, args|
      help_now!("Project_key is unspecified".foreground(:red)) if args.empty?
      proj_key = args.shift
      api_key = global_options[:api_key]

      response = Veye::Project::Check.get_project(proj_key, api_key)
      unless response.success
        error_msg = "Cant read information about project: `#{proj_key}`"
        error_msg +=  "- #{response.message}".foreground(:red)
        exit_now! error_msg
      end

      Veye::Project::Check.format(response.data, options[:format])
      Veye::Project::Check.format_dependencies(response.data['dependencies'], options[:format])
    end
  end

  c.desc "show licences of subdependencies"
  c.arg_name "project_key"
  c.command :licences do |licences|
    licences.action do |global_options, options, args|
      help_now!("Project's key is unspecified".foreground(:red)) if args.empty?
      proj_key = args.shift
      api_key = global_options[:api_key]

      response = Veye::Project::Licence.get_project(proj_key, api_key)
      unless response.success
        error_msg = sprintf("%s \n %s",
                            "Cant access a information for project `#{proj_key}`".foreground(:red),
                            "#{response.message}")
        exit_now! error_msg
      end
      
      Veye::Project::Licence.format(response.data, options[:format])
    end
  end

  c.desc "delete project"
  c.arg_name "project_key"
  c.command :delete do |delete|
    delete.action do |global_options, options, args|
      help_now!("Project is missing".foreground(:red)) if args.empty?
      proj_key = args.shift
      api_key = global_options[:api_key]

      response = Veye::Project::Check.delete_project(proj_key, api_key)
      unless response.success
        printf("Cant delete - %s\n%s\n", response.message.foreground(:red),
                                         response.data['error'])
      else
        printf "Deleted\n".foreground(:green)
      end
    end
  end
end

desc "package related methods"
command :products do |c|
  c.desc "change output format"
  c.flag [:format, 'format-name'], :default_value => 'pretty'

  c.desc "check your following status"
  c.arg_name "prod_key"
  c.command :following do |following|
    following.action do |global_options, options, args|
      help_now!("Product's key is missing".foreground(:red)) if args.empty?
      prod_key = args.shift
      api_key = global_options[:api_key]
      
      response = Veye::Package::Follow.get_follow_status(prod_key, api_key)
      unless response.success
        error_msg = sprintf("Checking state of following failed: %s \n %s",
                           "#{response.message}".foreground(:red),
                           "#{response.data}")
        exit_now! error_msg
      end
      
      printf "#{response.data}\n".foreground(:green)
    end
  end

  c.desc "start following specific software package"
  c.arg_name "prod_key"
  c.command :follow do |follow|
    follow.action do |global_options, options, args|
      help_now!("Product's key is missing".foreground(:red)) if args.empty?
      prod_key = args.shift
      api_key = global_options[:api_key]
      
      response = Veye::Package::Follow.follow(prod_key, api_key)
      unless response.success
        error_msg = sprintf("Following failed: %s \n %s",
                           "#{response.message}".foreground(:red),
                           "#{response.data}")
        exit_now! error_msg
      end
      printf "#{response.data}\n".foreground(:green)
    end
  end

  c.desc "stop following given software package"
  c.arg_name "prod_key"
  c.command :unfollow do |unfollow|
    unfollow.action do |global_options, options, args|
      help_now!("Product's key is missing".foreground(:red)) if args.empty?
      prod_key = args.shift
      api_key = global_options[:api_key]

      response =  Veye::Package::Follow.unfollow(prod_key, api_key)
      unless response.success
        error_msg =  sprintf("Unfollowing failed: %s \n %s",
                            "#{response.message}".foreground(:red),
                            "#{response.data}")
        exit_now! error_msg
      end

      printf "#{response.data}\n".foreground(:green)
    end
  end
end


desc "handle your personal data"
command :me do |c|
  c.desc "change output format"
  c.flag [:format, 'format-name'], :default_value => 'pretty'

  c.desc "get profile information"
  c.action do |global_options, options, args|
    api_key = global_options[:api_key]
    response = Veye::User::Me.get_profile(api_key)
    unless response.success
      error_msg = sprintf("Failed to read your profile data: %s\n%s\n",
                         "#{response.message}".foreground(:red),
                         "#{response.data}")
      exit_now! error_msg
    end

    Veye::User::Me.format_profile response.data, options[:format]
  end

  c.desc "get your favorite packages"
  c.command :favorites do |favorites|
    favorites.desc "pagination number"
    favorites.flag [:page, 'page-number']

    favorites.desc "show paging information"
    favorites.switch [:pagination, 'show-pagination'], :default_value => true,
                                               :negatable => true

    favorites.action do |global_options, options, args|
      api_key = global_options[:api_key]
      response = Veye::User::Me.get_favorites(api_key, options[:page])

      unless response.success
        error_msg = sprintf("Failed to read your profile data: %s\n%s\n",
                           "#{response.message}".foreground(:red),
                           "#{response.data}")
        exit_now! error_msg
      end

      Veye::User::Me.format_favorites response.data['favorites'], options[:format]
      if options[:pagination]
        printf("\n#-- pagination data ------------------\n")
        Veye::Pagination::Show.format response.data['paging'], options[:format]
      end
    end

  end
end

exit run(ARGV)
